Steps:
1. create property to store parts of UI
2. override loadView() method to load UI programmatically
3. create UI elements and add constraints
4. create methods and add them using addTarget to the buttons




Comments:
- UIKit has some guides that can be used: safeAreaLayoutGuide and layoutMarginsGuide
- NSLayoutConstraint.activate() allow to activate an array of constraints vs setting .isActive = true for each one
- if you don't want to adjust buttons later you don't need to create properties for buttons
- by default auto layout uses view's intrinsic content size this can changed using:
    - content huggin priority - determines how likely view is to be larger than its intrinsic size (the less value, the more likely it will be stretched)
    - content compression resistence priority - chances of the view to become smaller than its intrinsic size
    - in general, the higher priority, the higher AL tries to satisfy them
- for buttons there is special method addTarget to connect them to some other code
- #selector(submitTapped(_:)) and #selector(submitTapped) are the same
- enumerated() method can be used to get item from the array as well as its position in the array
- trimmingCharacters(in:) with parameter .whitespacesAndNewlines allows to trim spaces, tabs and line breaks

